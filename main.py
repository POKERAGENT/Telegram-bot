import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
WEBHOOK_URL = os.getenv("WEBHOOK")
DATABASE_URL = os.getenv("DATABASE_URL")  # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
app = web.Application()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
async def create_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

db_pool = None

async def init_db():
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id BIGINT PRIMARY KEY,
                name TEXT,
                username TEXT
            )
        """)

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
async def add_user(user_id, name, username):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (id, name, username)
            VALUES ($1, $2, $3)
            ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, username = EXCLUDED.username
        """, user_id, name, username)

async def get_users():
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id FROM users")
        return [r["id"] for r in rows]

async def get_users_count():
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT COUNT(*) as count FROM users")
        return row["count"]

# --- –•—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await add_user(msg.from_user.id, msg.from_user.first_name, msg.from_user.username)

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", url="https://t.me/+ji-5MkKSIodkODE6"),
        InlineKeyboardButton("üåê –ù–∞—à —Å–∞–π—Ç", url="https://poker-agent.org"),
        InlineKeyboardButton("üìù NUTS POKER - —É—Ç—Ä–æ–∏–º –¥–µ–ø–æ–∑–∏—Ç", url="https://nutspoker.cc/club/AGENT"),
        InlineKeyboardButton("üìù QQPK POKER - —É—Ç—Ä–æ–∏–º –¥–µ–ø–æ–∑–∏—Ç", url="https://qqpk8.app:51999?shareCode=MGACZ9"),
        InlineKeyboardButton("üìù POKERDOM +3000rub –Ω–∞ –≤–∞—à —Å—á–µ—Ç", url="https://5pd-stat.com/click/6875327e6bcc63790e5beb28/1786/16153/subaccount"),
        InlineKeyboardButton("üìù ACR +50$ –Ω–∞ –≤–∞—à —Å—á–µ—Ç", url="https://go.wpnaffiliates.com/visit/?bta=236750&nci=5378"),
        InlineKeyboardButton("üìù TON POKER +30% –†–µ–π–∫–±—ç–∫", url="https://t.me/myTonPokerBot/lobby?startapp=eyJhZnAiOiJZalZtTlRWak9UWmpObVExWkRZeFlqa3dOV1V3WWpkbFl6YzRPVGt5T1dVIn0"),
        InlineKeyboardButton("üìù 1WIN +30% –†–µ–π–∫–±—ç–∫", url="https://1wsmhl.life/?p=lu27"),
        InlineKeyboardButton("üìù RPTBET +20% –†–µ–π–∫–±—ç–∫", url="https://click.rptbet.org/PaneSU76"),
        InlineKeyboardButton("üìù PHENOMPOKER +–ü—Ä–∏–∑—ã/–†–æ–∑—ã–≥—Ä—ã—à–∏", url="https://play.phenompoker.com/register?r=Agent"),
    )

    text = (f"<b>üëã –ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!</b>\n\n"
            f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            f"<b>–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
            f"üí∞ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n"
            f"üéÅ –±–æ–Ω—É—Å—ã –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç—ã!\n"
            f"‚ôªÔ∏è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π–∫–±—ç–∫!\n"
            f"üìà –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –∞–∫—Ü–∏—è–º –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!\n\n"
            f"‚ÑπÔ∏è –° –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ê–ö–¶–ò–ò!\n\n"
            f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:")
    await msg.answer(text, reply_markup=kb, parse_mode="HTML")

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@dp.message_handler(commands=["admin"])
async def admin_panel(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )
    await msg.
answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "stats")
async def send_stats(callback: types.CallbackQuery):
    count = await get_users_count()
    await callback.message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {count}")

@dp.callback_query_handler(lambda c: c.data == "broadcast")
async def start_broadcast(callback: types.CallbackQuery):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    dp.register_message_handler(send_broadcast, lambda m: m.from_user.id == ADMIN_ID, state=None)

async def send_broadcast(msg: types.Message):
    users = await get_users()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, msg.text)
            count += 1
        except:
            pass
    await msg.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    dp.message_handlers.unregister(send_broadcast)

# --- Webhook ---
async def on_startup(app):
    global db_pool
    db_pool = await create_db_pool()
    await init_db()

    if not WEBHOOK_URL:
        raise ValueError("‚ùå WEBHOOK –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def handle_request(request):
    if request.method == "POST":
        update = types.Update(**await request.json())
        Dispatcher.set_current(dp)
        Bot.set_current(bot)
        await dp.process_update(update)
    return web.Response(text="OK")

app.router.add_post("/webhook", handle_request)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    try:
        web.run_app(app, host="0.0.0.0", port=port)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")